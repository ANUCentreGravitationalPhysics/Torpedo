function [w_0, z_0] = gauss(size, d, lambda);% function [w_0, z_0] = gauss(size, d, lambda);% alternative to gaussian which uses Matlab routine fmins to find minium of the error between% the data points and a gausian beam fit. About 4 times faster than gaussian.%% size   :    Beam Scan beam diameter value [micrometers]% d      :    relative position value [mm]% lambda :    wavelenght [nm]%% w_0    :    fitted waist (radius) [micrometers]% z_0    :    fitted relative waist position [mm]%%%%%   NEEDS TO BE IN THE SAME FOLDER AS THE FUNCTION err.m %%%%%%% if err.m goes missing, take the commented lines from the bottom of thus file and same as% the function file err.m in the same folder as this file.global w_values z_values wavelength%%%%%% INPUTS %%%%%%%% beam diameters/micrometersw_values=size/2/1000;       % converting to radius and mm%% positions/mmz_values= d;%% Wavelength/mmwavelength = lambda;%%%%%%%%solution%%%%%%%%%[g1,dex] = min(w_values);guess_z = z_values(dex);if dex == 1	guess_z = min(z_values)-1000;			% finding initial guess of z0elseif dex == length(z_values)	guess_z = max(z_values)+1000;endopt=[0,10^-6,10^-6,0,0,0,0,0,0,0,0,0,0,1000,0,0,0,0]; % parameters for minimization													  % opt(2) & opt(3) are epsilon & delta													  %opt(14) is the max iterations[x,y]=fminsearch('err',[min(w_values),guess_z],opt);w_0 = x(1);z_0 = x(2);fprintf('w_0 = %5.2f um at \t z_0 = %5.2f mm\n', w_0*1e3, z_0);%%%   Contents of err.m %%%%%% function error_fun=err(params)   %params is the vector [w0, z0]% global w_values z_values wavelength% % params(1)% params(2)% % error_fun = sum( abs( sqrt(w_values.^2 - params(1).^2).*pi.*params(1) ./ ...%                       wavelength - abs(params(2)-z_values) ...%                     ) + ...%                  abs( w_values.^2 - (params(1).^2 + (wavelength./(pi.*params(1))).^2 .* ...%                       (z_values-params(2)).^2) ...%                     ) ...%                 );